package endpoint

import (
	"github.com/kassisol/hbm/docker/allow"
	"github.com/kassisol/hbm/pkg/uri"
)

func GetUris() *uri.URIs {
	uris := uri.New()

	uris.Register("GET", `^/containers/json`, allow.True, "container_list", "container ls", "List containers")
	uris.Register("POST", `^/containers/create`, allow.ContainerCreate, "container_create", "container create", "Create a container")
	uris.Register("GET", `^/containers/(.+)/json`, allow.ContainerOwner, "container_inspect", "container inspect", "Return low-level information about a container")
	uris.Register("GET", `^/containers/(.+)/top`, allow.ContainerOwner, "container_top", "container top", "List processes running inside a container")
	uris.Register("GET", `^/containers/(.+)/logs`, allow.ContainerOwner, "container_logs", "container logs", "Get stdout and stderr logs from a container")
	uris.Register("GET", `^/containers/(.+)/changes`, allow.ContainerOwner, "container_changes", "events", "Returns which files in a container's filesystem have been added, deleted, or modified")
	uris.Register("GET", `^/containers/(.+)/export`, allow.ContainerOwner, "container_export", "container export", "Export the contents of a container as a tarball")
	uris.Register("GET", `^/containers/(.+)/stats`, allow.ContainerOwner, "container_stats", "container stats", "The endpoint returns a live stream of a container's resource usage statistics")
	uris.Register("POST", `^/containers/(.+)/resize`, allow.ContainerOwner, "container_resize", "resize", "Resize the TTY for a container")
	uris.Register("POST", `^/containers/(.+)/start`, allow.ContainerOwner, "container_start", "container start", "Start a container")
	uris.Register("POST", `^/containers/(.+)/stop`, allow.ContainerOwner, "container_stop", "container stop", "Stop a container")
	uris.Register("POST", `^/containers/(.+)/restart`, allow.ContainerOwner, "container_restart", "container restart", "Restart a container")
	uris.Register("POST", `^/containers/(.+)/kill`, allow.ContainerOwner, "container_kill", "container kill", "Kill a container")
	uris.Register("POST", `^/containers/(.+)/update`, allow.ContainerOwner, "container_update", "container update", "Change various configuration options of a container without having to recreate it")
	uris.Register("POST", `^/containers/(.+)/rename`, allow.ContainerOwner, "container_rename", "container rename", "Rename a container")
	uris.Register("POST", `^/containers/(.+)/pause`, allow.ContainerOwner, "container_pause", "container pause", "Use the cgroups freezer to suspend all processes in a container")
	uris.Register("POST", `^/containers/(.+)/unpause`, allow.ContainerOwner, "container_unpause", "container unpause", "Resume a container which has been paused")
	uris.Register("POST", `^/containers/(.+)/attach`, allow.ContainerOwner, "container_attach", "container attach", "Attach to a container to read its output or send it input")
	uris.Register("GET", `^/containers/(.+)/attach/ws`, allow.ContainerOwner, "container_attach_ws", "attach_ws", "Attach to a container via a websocket")
	uris.Register("POST", `^/containers/(.+)/wait`, allow.ContainerOwner, "container_wait", "container wait", "Block until a container stops, then returns the exit code")
	uris.Register("DELETE", `^/containers/(.+)`, allow.ContainerOwner, "container_remove", "container rm", "Remove a container")
	uris.Register("HEAD", `^/containers/(.+)/archive`, allow.ContainerOwner, "container_archive_info", "archive", "Get information about files in a container")
	uris.Register("GET", `^/containers/(.+)/archive`, allow.ContainerOwner, "container_archive", "archive", "Get a tar archive of a resource in the filesystem of container id")
	uris.Register("PUT", `^/containers/(.+)/archive`, allow.ContainerOwner, "container_archive_extract", "archive", "Upload a tar archive to be extracted to a path in the filesystem of container id")
	uris.Register("POST", `^/containers/prune`, allow.True, "container_prune", "container prune", "Delete stopped containers")

	// Buildkit
	uris.Register("POST", `^/containers/buildx_buildkit_default/exec`, allow.True, "buildkit", "buildkit", "Access Buildkit default builder")
	uris.Register("POST", `^/grpc`, allow.True, "grpc", "grpc", "Initialize grpc session")
	uris.Register("POST", `^/session`, allow.True, "session", "session", "Initialize interactive session")

	uris.Register("GET", `^/images/json`, allow.True, "image_list", "image ls", "Returns a list of images on the server")
	uris.Register("POST", `^/build`, allow.True, "image_build", "image build", "Build an image from a tar archive with a Dockerfile in it")
	uris.Register("POST", `^/images/create`, allow.ImageCreate, "image_create", "image pull", "Create an image by either pulling it from a registry or importing it")
	uris.Register("GET", `^/images/(.+)/json`, allow.True, "image_inspect", "image inspect", "Return low-level information about an image")
	uris.Register("GET", `^/images/(.+)/history`, allow.True, "image_history", "image history", "Return parent layers of an image")
	uris.Register("POST", `^/images/(.+)/push`, allow.True, "image_push", "image push", "Push an image to a registry")
	uris.Register("POST", `^/images/(.+)/tag`, allow.True, "image_tag", "image tag", "Tag an image so that it becomes part of a repository")
	uris.Register("DELETE", `^/images/(.+)`, allow.True, "image_remove", "image rm", "Remove an image, along with any untagged parent images that were referenced by that image")
	uris.Register("GET", `^/images/search`, allow.True, "image_search", "search", "Search for an image on Docker Hub")
	uris.Register("POST", `^/images/prune`, allow.True, "image_prune", "image prune", "Delete unused images")
	uris.Register("POST", `^/commit`, allow.True, "commit", "commit", "Create a new image from a container")
	uris.Register("GET", `^/images/(.+)/get`, allow.True, "image_save_image", "image save", "Get a tarball containing all images and metadata for a repository")
	uris.Register("GET", `^/images/get`, allow.True, "image_save_images", "image save", "Get a tarball containing all images and metadata for several image repositories")
	uris.Register("POST", `^/images/load`, allow.True, "image_load", "image load", "Load a set of images and tags into a repository")

	uris.Register("GET", `^/networks$`, allow.True, "network_list", "network ls", "Return a list of networks")
	uris.Register("GET", `^/networks/(.+)`, allow.True, "network_inspect", "network inspect", "Inspect a network")
	uris.Register("DELETE", `^/networks/(.+)`, allow.True, "network_remove", "network rm", "Remove a network")
	uris.Register("POST", `^/networks/create`, allow.True, "network_create", "network create", "Create a network")
	uris.Register("POST", `^/networks/(.+)/connect`, allow.True, "network_connect", "network connect", "Connect container to a network")
	uris.Register("POST", `^/networks/(.+)/disconnect`, allow.True, "network_disconnect", "network disconnect", "Disconnect a container from a network")
	uris.Register("POST", `^/networks/prune`, allow.True, "network_prune", "network prune", "Delete unused networks")

	uris.Register("GET", `^/volumes$`, allow.True, "volume_list", "volume ls", "List volumes")
	uris.Register("POST", `^/volumes/create`, allow.VolumeCreate, "volume_create", "volume create", "Create a volume")
	uris.Register("GET", `^/volumes/(.+)`, allow.True, "volume_inspect", "volume inspect", "Inspect a volume")
	uris.Register("DELETE", `^/volumes/(.+)`, allow.True, "volume_remove", "volume rm", "Instruct the driver to remove the volume")
	uris.Register("POST", `^/volumes/prune`, allow.True, "volume_prune", "volume prune", "Delete unused volumes")

	uris.Register("POST", `^/containers/(.+)/exec`, allow.ContainerOwner, "container_exec_create", "exec", "Run a command inside a running container")
	uris.Register("POST", `^/exec/(.+)/start`, allow.True, "exec_start", "exec", "Starts a previously set up exec instance")
	uris.Register("POST", `^/exec/(.+)/resize`, allow.True, "exec_resize", "exec", "Resize the TTY session used by an exec instance")
	uris.Register("GET", `^/exec/(.+)/json`, allow.True, "exec_inspect", "exec", "Return low-level information about an exec instance")

	uris.Register("GET", `^/swarm`, allow.True, "swarm_inspect", "swarm info", "Inspect swarm")
	uris.Register("POST", `^/swarm/init`, allow.True, "swarm_init", "swarm init", "Initialize a new swarm")
	uris.Register("POST", `^/swarm/join`, allow.True, "swarm_join", "swarm join", "Join an existing swarm")
	uris.Register("POST", `^/swarm/leave`, allow.True, "swarm_leave", "swarm leave", "Leave a swarm")
	uris.Register("POST", `^/swarm/update`, allow.True, "swarm_update", "swarm update", "Update a swarm")
	uris.Register("GET", `^/swarm/unlockkey`, allow.True, "swarm_unlock_key", "swarm unlock", "Get the unlock key")
	uris.Register("POST", `^/swarm/unlock`, allow.True, "swarm_unlock", "swarm unlock", "Unlock a locked manager")

	uris.Register("GET", `^/nodes`, allow.True, "node_list", "node ls", "List nodes")
	uris.Register("GET", `^/nodes/(.+)`, allow.True, "node_inspect", "node inspect", "Inspect a node")
	uris.Register("DELETE", `^/nodes/(.+)`, allow.True, "node_remove", "node rm", "Delete a node")
	uris.Register("POST", `^/nodes/(.+)/update`, allow.True, "node_update", "node update", "Update a node")

	uris.Register("GET", `^/services`, allow.True, "service_list", "service ls", "List services")
	uris.Register("POST", `^/services/create`, allow.ServiceCreate, "service_create", "service create", "Create a service")
	uris.Register("GET", `^/services/(.+)`, allow.True, "service_inspect", "service inspect", "Inspect a service")
	uris.Register("DELETE", `^/services/(.+)`, allow.True, "service_remove", "service rm", "Delete a service")
	uris.Register("POST", `^/services/(.+)/update`, allow.ServiceCreate, "service_update", "service update", "Update a service")
	uris.Register("GET", `^/services/(.+)/logs`, allow.True, "service_logs", "service logs", "Get service logs")

	uris.Register("GET", `^/tasks`, allow.True, "task_list", "stask services", "List tasks")
	uris.Register("GET", `^/tasks/(.+)`, allow.True, "task_inspect", "stask tasks", "Inspect a task")
	uris.Register("GET", `^/tasks/(.+)/logs`, allow.True, "task_logs", "task logs", "Get stdout and stderr logs from a task")

	uris.Register("GET", `^/secrets`, allow.True, "secret_list", "secret ls", "List secrets")
	uris.Register("POST", `^/secrets/create`, allow.True, "secret_create", "secret create", "Create a secret")
	uris.Register("GET", `^/secrets/(.+)`, allow.True, "secret_inspect", "secret inspect", "Inspect a secret")
	uris.Register("DELETE", `^/secrets/(.+)`, allow.True, "secret_remove", "secret rm", "Delete a secret")
	uris.Register("POST", `^/secrets/(.+)/update`, allow.True, "secret_update", "secret update", "Update a secret")

	uris.Register("GET", `^/configs`, allow.True, "config_list", "config ls", "List configs")
	uris.Register("POST", `^/configs/create`, allow.True, "config_create", "config create", "Create a config")
	uris.Register("GET", `^/configs/(.+)`, allow.True, "config_inspect", "config inspect", "Inspect a config")
	uris.Register("DELETE", `^/configs/(.+)`, allow.True, "config_remove", "config rm", "Delete a config")
	uris.Register("POST", `^/configs/(.+)/update`, allow.True, "config_update", "config update", "Update a config")

	uris.Register("GET", `^/plugins`, allow.True, "plugin_list", "plugin ls", "Returns information about installed plugins")
	uris.Register("GET", `^/plugins/privileges`, allow.True, "plugin_privileges", "plugin ls", "Get plugin privileges")
	uris.Register("POST", `^/plugins/pull`, allow.PluginPull, "plugin_pull", "plugin install", "Pulls and installs a plugin")
	uris.Register("GET", `^/plugins/(.+)/json`, allow.True, "plugin_inspect", "plugin inspect", "Inspect a plugin")
	uris.Register("DELETE", `^/plugins/(.+)`, allow.True, "plugin_remove", "plugin rm", "Delete a plugin")
	uris.Register("POST", `^/plugins/(.+)/enable`, allow.True, "plugin_enable", "plugin enable", "Enable a plugin")
	uris.Register("POST", `^/plugins/(.+)/disable`, allow.True, "plugin_disable", "plugin disable", "Disable a plugin")
	uris.Register("POST", `^/plugins/(.+)/upgrade`, allow.True, "plugin_upgrade", "plugin upgrade", "Upgrade a plugin")
	uris.Register("POST", `^/plugins/create`, allow.True, "plugin_create", "plugin create", "Create a plugin")
	uris.Register("POST", `^/plugins/(.+)/push`, allow.True, "plugin_push", "plugin push", "Push a plugin")
	uris.Register("POST", `^/plugins/(.+)/set`, allow.True, "plugin_set", "plugin set", "Configure a plugin")

	uris.Register("POST", `^/auth`, allow.True, "auth", "login", "Log in to a Docker registry")
	uris.Register("GET", `^/info`, allow.True, "info", "info", "Display system-wide information")
	uris.Register("GET", `^/version`, allow.True, "version", "version", "Show the Docker version information")
	uris.Register("GET", `^/events`, allow.True, "events", "events", "Monitor Docker's events")
	uris.Register("GET", `^/system/df`, allow.True, "system_df", "system df", "Get data usage information")

	return uris
}
